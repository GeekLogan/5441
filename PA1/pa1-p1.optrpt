Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at pa1-p1.c(40,3)
<Distributed chunk1>
   remark #15388: vectorization support: reference x has aligned access   [ pa1-p1.c(42,6) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 2.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pa1-p1.c(40,3)
<Distributed chunk2>
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at pa1-p1.c(40,3)
<Distributed chunk3>
   remark #15388: vectorization support: reference z has aligned access   [ pa1-p1.c(43,15) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pa1-p1.c(40,3)
<Distributed chunk4>
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at pa1-p1.c(40,3)
<Distributed chunk5>
   remark #15388: vectorization support: reference zz has aligned access   [ pa1-p1.c(44,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pa1-p1.c(40,3)
<Distributed chunk6>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pa1-p1.c(45,6)
      remark #15388: vectorization support: reference A has aligned access   [ pa1-p1.c(45,23) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.083
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 6.000 
      remark #15478: estimated potential speedup: 2.160 
      remark #15487: type converts: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at pa1-p1.c(99,5) inlined into pa1-p1.c(61,27)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pa1-p1.c(61,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at pa1-p1.c(98,3) inlined into pa1-p1.c(61,27)
         remark #15388: vectorization support: reference x has aligned access   [ pa1-p1.c(101,7) ]
         remark #15388: vectorization support: reference x has aligned access   [ pa1-p1.c(102,7) ]
         remark #15388: vectorization support: reference A has aligned access   [ pa1-p1.c(102,7) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 18 
         remark #15477: vector loop cost: 9.000 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at pa1-p1.c(72,3)
   remark #15388: vectorization support: reference yy has aligned access   [ pa1-p1.c(74,6) ]
   remark #15388: vectorization support: reference zz has aligned access   [ pa1-p1.c(74,16) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 2.330 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pa1-p1.c(112,23) inlined into pa1-p1.c(80,27)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pa1-p1.c(80,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at pa1-p1.c(112,2) inlined into pa1-p1.c(80,27)
         remark #15388: vectorization support: reference yy has aligned access   [ pa1-p1.c(113,3) ]
         remark #15388: vectorization support: reference yy has aligned access   [ pa1-p1.c(113,3) ]
         remark #15388: vectorization support: reference A has aligned access   [ pa1-p1.c(113,3) ]
         remark #15388: vectorization support: reference x has aligned access   [ pa1-p1.c(114,3) ]
         remark #15388: vectorization support: reference A has aligned access   [ pa1-p1.c(114,3) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.031
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 4 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 18 
         remark #15477: vector loop cost: 8.000 
         remark #15478: estimated potential speedup: 2.240 
         remark #15488: --- end vector loop cost summary ---
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at pa1-p1.c(144,3) inlined into pa1-p1.c(90,3)
   remark #15388: vectorization support: reference y has aligned access   [ pa1-p1.c(147,6) ]
   remark #15388: vectorization support: reference yy has aligned access   [ pa1-p1.c(147,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.231
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 36 
   remark #15477: vector loop cost: 13.000 
   remark #15478: estimated potential speedup: 2.760 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pa1-p1.c(144,3) inlined into pa1-p1.c(91,3)
   remark #15388: vectorization support: reference z has aligned access   [ pa1-p1.c(147,6) ]
   remark #15388: vectorization support: reference zz has aligned access   [ pa1-p1.c(147,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.231
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 36 
   remark #15477: vector loop cost: 13.000 
   remark #15478: estimated potential speedup: 2.760 
   remark #15488: --- end vector loop cost summary ---
LOOP END
===========================================================================

Begin optimization report for: pa1p1(int, double (*)[*], double *, double *, double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at pa1-p1.c(98,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between y line 101 and z line 102
   remark #15346: vector dependence: assumed OUTPUT dependence between z line 102 and y line 101

   LOOP BEGIN at pa1-p1.c(99,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y line 101 and z line 102
      remark #15346: vector dependence: assumed OUTPUT dependence between z line 102 and y line 101
   LOOP END

   LOOP BEGIN at pa1-p1.c(99,5)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: pa1p1opt(int, double (*)[*], double *, double *, double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at pa1-p1.c(112,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between y line 113 and z line 114
   remark #15346: vector dependence: assumed OUTPUT dependence between z line 114 and y line 113

   LOOP BEGIN at pa1-p1.c(112,23)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y line 113 and z line 114
      remark #15346: vector dependence: assumed OUTPUT dependence between z line 114 and y line 113
   LOOP END

   LOOP BEGIN at pa1-p1.c(112,23)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: compare(int, double *, double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at pa1-p1.c(144,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at pa1-p1.c(144,3)
   remark #15388: vectorization support: reference wref has aligned access   [ pa1-p1.c(147,6) ]
   remark #15388: vectorization support: reference w has aligned access   [ pa1-p1.c(147,6) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.800
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 38 
   remark #15477: vector loop cost: 15.000 
   remark #15478: estimated potential speedup: 2.470 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at pa1-p1.c(144,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at pa1-p1.c(144,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================
