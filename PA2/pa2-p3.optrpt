Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at pa2-p3.c(37,1)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pa2-p3.c(38,3)
      remark #15388: vectorization support: reference a has aligned access   [ pa2-p3.c(39,6) ]
      remark #15388: vectorization support: reference b has aligned access   [ pa2-p3.c(40,6) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.036
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ pa2-p3.c(39,6) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ pa2-p3.c(40,6) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 18 
      remark #15477: vector loop cost: 7.000 
      remark #15478: estimated potential speedup: 2.570 
      remark #15487: type converts: 4 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at pa2-p3.c(43,18)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at pa2-p3.c(45,1)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at pa2-p3.c(46,2)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at pa2-p3.c(47,3)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: gather was emulated for the variable a:  strided by 2000   [ pa2-p3.c(48,25) ]
         remark #15328: vectorization support: gather was emulated for the variable b:  strided by 2000   [ pa2-p3.c(48,33) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 4
         remark #15460: masked strided loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 18.000 
         remark #15478: estimated potential speedup: 0.500 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at pa2-p3.c(47,3)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at pa2-p3.c(53,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pa2-p3.c(53,3)
   <Multiversioned v2>
      remark #15388: vectorization support: reference cc has aligned access   [ pa2-p3.c(54,5) ]
      remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(54,5) ]
      remark #15412: vectorization support: streaming store was generated for cc   [ pa2-p3.c(54,5) ]
      remark #15305: vectorization support: vector length 4
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15467: unmasked aligned streaming stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 0.750 
      remark #15478: estimated potential speedup: 5.330 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at pa2-p3.c(59,18)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at pa2-p3.c(110,3) inlined into pa2-p3.c(90,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pa2-p3.c(111,4) inlined into pa2-p3.c(90,2)
      remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(114,6) ]
      remark #15388: vectorization support: reference cc has aligned access   [ pa2-p3.c(114,6) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.767
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ pa2-p3.c(115,20) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 35 
      remark #15477: vector loop cost: 10.750 
      remark #15478: estimated potential speedup: 3.250 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at pa2-p3.c(66,1)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pa2-p3.c(67,1)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at pa2-p3.c(72,2)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at pa2-p3.c(73,3)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at pa2-p3.c(74,4)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at pa2-p3.c(74,4)
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(75,5) ]
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(75,5) ]
               remark #15388: vectorization support: reference a has aligned access   [ pa2-p3.c(75,5) ]
               remark #15305: vectorization support: vector length 4
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.406
               remark #15300: LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 2 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 9 
               remark #15477: vector loop cost: 2.000 
               remark #15478: estimated potential speedup: 4.460 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at pa2-p3.c(74,4)
            <Remainder loop for vectorization>
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(75,5) ]
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(75,5) ]
               remark #15388: vectorization support: reference a has aligned access   [ pa2-p3.c(75,5) ]
               remark #15305: vectorization support: vector length 4
               remark #15309: vectorization support: normalized vectorization overhead 0.929
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at pa2-p3.c(74,4)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at pa2-p3.c(78,2)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at pa2-p3.c(79,3)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at pa2-p3.c(80,4)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at pa2-p3.c(80,4)
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(81,5) ]
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(81,5) ]
               remark #15388: vectorization support: reference a has aligned access   [ pa2-p3.c(81,5) ]
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(82,5) ]
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(82,5) ]
               remark #15388: vectorization support: reference a has aligned access   [ pa2-p3.c(82,5) ]
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(83,5) ]
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(83,5) ]
               remark #15388: vectorization support: reference a has aligned access   [ pa2-p3.c(83,5) ]
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(84,5) ]
               remark #15388: vectorization support: reference c has aligned access   [ pa2-p3.c(84,5) ]
               remark #15388: vectorization support: reference a has aligned access   [ pa2-p3.c(84,5) ]
               remark #15305: vectorization support: vector length 4
               remark #15309: vectorization support: normalized vectorization overhead 0.688
               remark #15300: LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 8 
               remark #15449: unmasked aligned unit stride stores: 4 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 36 
               remark #15477: vector loop cost: 8.000 
               remark #15478: estimated potential speedup: 4.460 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at pa2-p3.c(80,4)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at pa2-p3.c(66,1)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.   [ pa2-p3.c(65,1) ]
LOOP END
===========================================================================

Begin optimization report for: compare(int, float (*)[*], float (*)[*])

    Report from: Vector optimizations [vec]


LOOP BEGIN at pa2-p3.c(110,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at pa2-p3.c(111,4)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at pa2-p3.c(111,4)
      remark #15388: vectorization support: reference wref has aligned access   [ pa2-p3.c(114,6) ]
      remark #15388: vectorization support: reference w has aligned access   [ pa2-p3.c(114,6) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.093
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ pa2-p3.c(115,20) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 35 
      remark #15477: vector loop cost: 10.750 
      remark #15478: estimated potential speedup: 3.110 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at pa2-p3.c(111,4)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at pa2-p3.c(111,4)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================
